package ${packagePrefix}${domainPkg};

import org.hibernate.annotations.GenericGenerator;

import java.io.Serializable;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;
import javax.persistence.Entity;
import javax.persistence.Table;
#if($pkResult.size() >1 )
import javax.persistence.EmbeddedId;
import javax.persistence.IdClass;
#else
import javax.persistence.SequenceGenerator;
#end

#set ($TABLE_NAME = $tableName )

/**
* @author: ${author}
* @version: 1.0
* @since ${date}
*/
@Entity
@Table(name = "$TABLE_NAME")
#if($pkResult.size() !=1 )
@IdClass(${className}.PK.class)
#end
public class ${className} implements Serializable {
    private static final long serialVersionUID = 1L;
#foreach($prop in $pkResult)
    private ${prop.dataType} ${prop.javaName} ;
#end

#foreach($prop in $columnResult)
    private ${prop.dataType} ${prop.javaName} ;
#end


#foreach($prop in $pkResult)
    @Id
    @Column(name = "$prop.name", nullable = $prop.nullable, length = $prop.length)
#if($pkResult.size()==1)
#if($prop.dataType == "java.lang.String" && $prop.length == 36)
    @GeneratedValue(generator = "idGenerator")
    @GenericGenerator(name = "idGenerator", strategy = "uuid2")
#else
    @SequenceGenerator(name = "${TABLE_NAME}_SEQ", sequenceName = "SEQ_${TABLE_NAME}_ID",allocationSize=1)
    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator="${TABLE_NAME}_SEQ")
#end
#end
#if ($prop.comments != "")
    // "$prop.comments"
#end
    public ${prop.dataType} ${prop.getterMethod} () {
        return this.${prop.javaName};
    }

    public void ${prop.setterMethod} (${prop.dataType} ${prop.javaName}) {
        this.${prop.javaName} = ${prop.javaName};
    }
#end

#foreach($prop in $columnResult)

    @Basic
    @Column(name = "${prop.name}", nullable = $prop.nullable, length = $prop.length)
#if ($prop.comments != "")
    // "$prop.comments"
#end
    public ${prop.dataType} ${prop.getterMethod} () {
        return ${prop.javaName};
    }

    public void ${prop.setterMethod} (${prop.dataType} ${prop.javaName}) {
        this.${prop.javaName} = ${prop.javaName};
    }
#end


#if($pkResult.size() > 1)
    public class PK implements Serializable {
        private static final long serialVersionUID = 1L;
#foreach($prop in $pkResult)
        private ${prop.dataType}  ${prop.javaName} ;
#end
#foreach($prop in $pkResult)

        @Id
        @Column(name = "${prop.name}", nullable = $prop.nullable, length = $prop.length)
#if ($prop.comments != "")
        // "$prop.comments"
#end
        public ${prop.dataType} ${prop.getterMethod} () {
            return ${prop.javaName};
        }

        public void ${prop.setterMethod} (${prop.dataType} ${prop.javaName}) {
            this.${prop.javaName} = ${prop.javaName};
        }
    #end
    }
#end

}